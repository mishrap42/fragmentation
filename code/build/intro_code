library(here)
library(sf)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(readxl)

# This stores your repository path as a function "here()"
if (grepl("ahaanj", here())) {
  dropbox_dir <- "/Users/ahaanj/Dartmouth College Dropbox/Ahaan Jindal/Protected Area Fragmentation/"
} else if (grepl("mishrap", here())) {
  dropbox_dir <- "/Users/mishrap/Dropbox (Personal)/Protected Area Fragmentation/"
} else {
  stop("Username not recognized. Please update the script with your Dropbox path.")
}

# Read in the shapefile of protected areas
pa <- st_read(paste0(dropbox_dir, 'Data/protected sites/protectedsites.shp'))

# Get a stratified sample - 50 areas from each country
set.seed(123)
pa_sample <- pa %>%
  group_by(cddaCountr) %>%
  slice_sample(prop = 1) %>%
  slice_head(n = 50) %>%
  ungroup()

cat("Total sampled areas:", nrow(pa_sample), "\n")

# Save it
saveRDS(pa_sample, paste0(dropbox_dir, "Data/pa_sample_stratified_50.rds"))

# Map it
ggplot(pa_sample) +
  geom_sf(fill = "darkgreen", color = "black", alpha = 0.6, size = 0.1) +
  theme_minimal() +
  labs(title = "Stratified Sample of European Protected Areas")


# ========== CALCULATION OF ALL SHAPE METRICS ==========
pa_shapes <- pa_sample %>%
  mutate(
    # Basic measurements
    area_km2 = as.numeric(st_area(geometry)) / 1e6,
    perimeter_km = as.numeric(st_length(st_cast(geometry, "MULTILINESTRING"))) / 1000
  ) %>%
  rowwise() %>%
  mutate(
    # 1. DISCONNECTION INDEX (number of separate parts)
    disconnection_index = ifelse(
      st_geometry_type(geometry) %in% c("MULTIPOLYGON", "GEOMETRYCOLLECTION"),
      length(st_cast(geometry, "POLYGON")),
      1
    ),
    
    # 4. RANGE (bbox diagonal - maximum extent)
    range_km = {
      bbox <- st_bbox(geometry)
      sqrt((bbox["xmax"] - bbox["xmin"])^2 + (bbox["ymax"] - bbox["ymin"])^2) / 1000
    }
  ) %>%
  ungroup() %>%
  mutate(
    # 2. REMOTENESS (area per perimeter)
    remoteness = area_km2 / perimeter_km,
    
    # 3. SPIN (compactness)
    spin = (4 * pi * area_km2) / (perimeter_km^2),
    
    # Perimeter-area ratio for reference
    perimeter_area_ratio = perimeter_km / area_km2
  )

cat("Calculated shape metrics for", nrow(pa_shapes), "protected areas\n")
View(st_drop_geometry(pa_shapes))

# Summary by country
shape_summary <- pa_shapes %>%
  st_drop_geometry() %>%
  group_by(cddaCountr) %>%
  summarize(
    n_sampled = n(),
    mean_area = mean(area_km2, na.rm = TRUE),
    mean_disconnection = mean(disconnection_index, na.rm = TRUE),
    mean_remoteness = mean(remoteness, na.rm = TRUE),
    mean_spin = mean(spin, na.rm = TRUE),
    mean_range = mean(range_km, na.rm = TRUE)
  ) %>%
  arrange(desc(mean_area))

View(shape_summary)

# ========== THIS IS TO COMPUTE THE EXTREMES FOR EACH METRIC ==========

# 1. DISCONNECTION INDEX
most_disconnected <- pa_shapes %>%
  st_drop_geometry() %>%
  arrange(desc(disconnection_index)) %>%
  select(cddaId, siteName, cddaCountr, disconnection_index, area_km2) %>%
  head(2)

least_disconnected <- pa_shapes %>%
  st_drop_geometry() %>%
  arrange(disconnection_index) %>%
  select(cddaId, siteName, cddaCountr, disconnection_index, area_km2) %>%
  head(2)

# 2. REMOTENESS
most_remote <- pa_shapes %>%
  st_drop_geometry() %>%
  arrange(desc(remoteness)) %>%
  select(cddaId, siteName, cddaCountr, remoteness, area_km2, perimeter_km) %>%
  head(2)

least_remote <- pa_shapes %>%
  st_drop_geometry() %>%
  arrange(remoteness) %>%
  select(cddaId, siteName, cddaCountr, remoteness, area_km2, perimeter_km) %>%
  head(2)

# 3. SPIN (Compactness)
most_compact <- pa_shapes %>%
  st_drop_geometry() %>%
  arrange(desc(spin)) %>%
  select(cddaId, siteName, cddaCountr, spin, area_km2, perimeter_km) %>%
  head(2)

least_compact <- pa_shapes %>%
  st_drop_geometry() %>%
  arrange(spin) %>%
  select(cddaId, siteName, cddaCountr, spin, area_km2, perimeter_km) %>%
  head(2)

# 4. RANGE
largest_range <- pa_shapes %>%
  st_drop_geometry() %>%
  arrange(desc(range_km)) %>%
  select(cddaId, siteName, cddaCountr, range_km, area_km2) %>%
  head(2)

smallest_range <- pa_shapes %>%
  st_drop_geometry() %>%
  arrange(range_km) %>%
  select(cddaId, siteName, cddaCountr, range_km, area_km2) %>%
  head(2)

# PRINT ALL RESULTS
cat("\n========== DISCONNECTION INDEX ==========\n")
cat("\nMOST DISCONNECTED (most fragments):\n")
print(most_disconnected)
cat("\nLEAST DISCONNECTED (fewest fragments):\n")
print(least_disconnected)

cat("\n========== REMOTENESS ==========\n")
cat("\nMOST REMOTE (deepest interior):\n")
print(most_remote)
cat("\nLEAST REMOTE (most edge):\n")
print(least_remote)

cat("\n========== SPIN (Compactness) ==========\n")
cat("\nMOST COMPACT (most circular):\n")
print(most_compact)
cat("\nLEAST COMPACT (most irregular):\n")
print(least_compact)

cat("\n========== RANGE ==========\n")
cat("\nLARGEST RANGE (biggest spatial extent):\n")
print(largest_range)
cat("\nSMALLEST RANGE (smallest spatial extent):\n")
print(smallest_range)

# ========== VISUALIZE ONE EXAMPLE ==========
# Pick the most compact area as an example
specific_id <- most_compact$cddaId[1]

pa_single <- pa_shapes %>%
  filter(cddaId == specific_id)

ggplot(pa_single) +
  geom_sf(fill = "lightgreen", color = "darkgreen", size = 1) +
  theme_minimal() +
  labs(title = paste("Most Compact Area:", pa_single$siteName),
       subtitle = paste("Country:", pa_single$cddaCountr, "| Spin:", round(pa_single$spin, 3)))

cat("\n=== EXAMPLE: MOST COMPACT AREA ===\n")
cat("Site Name:", pa_single$siteName, "\n")
cat("Country:", pa_single$cddaCountr, "\n")
cat("Area:", round(pa_single$area_km2, 2), "kmÂ²\n")
cat("Disconnection Index:", pa_single$disconnection_index, "parts\n")
cat("Remoteness:", round(pa_single$remoteness, 3), "km\n")
cat("Spin (Compactness):", round(pa_single$spin, 3), "\n")
cat("Range:", round(pa_single$range_km, 2), "km\n")
